# -*- coding: utf-8 -*-
"""Credit_Scoring_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yjTaib1xrm1K_VrznbTwk5Y4X8l2aWbz
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_curve, roc_auc_score

# Load the dataset
df = pd.read_csv('credit_risk_dataset.csv')

# Handle missing values using the median (updated method)
df['person_emp_length'] = df['person_emp_length'].fillna(df['person_emp_length'].median())
df['loan_int_rate'] = df['loan_int_rate'].fillna(df['loan_int_rate'].median())

# Feature Engineering: Create a debt-to-income ratio
df['debt_to_income_ratio'] = df['loan_amnt'] / df['person_income']

# Define features (X) and target (y)
X = df.drop('loan_status', axis=1)
y = df['loan_status']

# Identify categorical and numerical feature names
categorical_features = ['person_home_ownership', 'loan_intent', 'loan_grade', 'cb_person_default_on_file']
numerical_features = ['person_age', 'person_income', 'person_emp_length', 'loan_amnt', 'loan_int_rate', 'loan_percent_income', 'cb_person_cred_hist_length', 'debt_to_income_ratio']

# Set up a preprocessing pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ])

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Define models for comparison
models = {
    "Logistic Regression": LogisticRegression(random_state=42, class_weight='balanced'),
    "Decision Tree": DecisionTreeClassifier(random_state=42, class_weight='balanced'),
    "Random Forest": RandomForestClassifier(random_state=42, class_weight='balanced')
}

# Store results for plotting
model_results = {}

# Train, evaluate, and store results for each model
for name, model in models.items():
    model_pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('classifier', model)])
    model_pipeline.fit(X_train, y_train)
    y_pred = model_pipeline.predict(X_test)
    y_pred_proba = model_pipeline.predict_proba(X_test)[:, 1]

    # Print text-based evaluation
    print(f"--- Results for {name} ---")
    print(classification_report(y_test, y_pred, target_names=['Non-Default (0)', 'Default (1)']))

    # Store probabilities for ROC curve plotting
    model_results[name] = y_pred_proba
    print("-" * 50)

# --- Generate the Visual Comparison Plot ---
plt.figure(figsize=(10, 8))

for name, probabilities in model_results.items():
    fpr, tpr, _ = roc_curve(y_test, probabilities)
    auc = roc_auc_score(y_test, probabilities)
    plt.plot(fpr, tpr, label=f'{name} (AUC = {auc:.4f})')

# Finalize and save the plot
plt.plot([0, 1], [0, 1], 'k--', label='Random Chance')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve Comparison of Models')
plt.legend(loc='lower right')
plt.grid(True)
plt.savefig("model_comparison_roc_curve.png")

print("\nVisual comparison plot has been generated and saved as model_comparison_roc_curve.png")

